---
name: Codacy Clang Tidy Upload

on:
  workflow_run:
    workflows: [CPP Lint, CPP Periodic Lint]
    types:
      - completed

jobs:
  clang_tidy_upload:
    runs-on: ubuntu-latest
    # Required because codacy's conversion tool relativizes paths in respect to the current working directory.
    # Since the project path inside a container is different than the path inside a "raw" worker VM we need to
    # make sure that we match the environment where the clang-tidy output was created (though any container
    # image would do, most likely).
    container:
      image: ghcr.io/gdatasoftwareag/vmi-build

    steps:
      - name: Download vmicore clang-tidy artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "clang_tidy_vmicore"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/clang_tidy_vmicore.zip`, Buffer.from(download.data));

      - run: unzip -j -d vmicore/ clang_tidy_vmicore.zip

      - name: Download inmemoryscanner clang-tidy artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "clang_tidy_inmemoryscanner"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/clang_tidy_inmemoryscanner.zip`, Buffer.from(download.data));

      - run: unzip -j -d inmemoryscanner/ clang_tidy_inmemoryscanner.zip

      - name: Consolidate clang-tidy output
        run: |
          cat vmicore/clang-tidy-output > clang-tidy-output
          cat inmemoryscanner/clang-tidy-output >> clang-tidy-output

      - name: Run Codacy Analysis CLI
        uses: rageagainsthepc/codacy-analysis-cli-action@fix-action-path
        with:
          run-docker-tools: false
          clang-tidy-output: clang-tidy-output
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true
