---
name: C++ CI

on:
  push:
    branches:
      - "main"
    paths:
      - '**.h'
      - '**.cpp'
      - '**/CMakeLists.txt'
      - '**/CMakePresets.json'
      - '**/.clang-tidy'
      - '**/.clang-format'
  pull_request:
    branches:
      - "main"
    paths:
      - '**.h'
      - '**.cpp'
      - '**/CMakeLists.txt'
      - '**/CMakePresets.json'
      - '**/.clang-tidy'
      - '**/.clang-format'

jobs:
  format:
    runs-on: ubuntu-latest
    container:
      image: gdatacyberdefense/clang-format:14

    steps:
      - uses: actions/checkout@v3

      - name: Perform C++ format check
        run: find . -iname *.h -o -iname *.cpp | xargs clang-format --style=file --dry-run --Werror

  test_core:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gdatasoftwareag/vmi-build

    steps:
      - uses: actions/checkout@v3

      - name: Test vmicore
        run: |
          cmake --preset gcc-debug -D VMICORE_TEST_COVERAGE:BOOL=ON
          cmake --build --preset gcc-build-debug --target vmicore-test
          ctest --preset gcc-test
          cd build-gcc-debug
          gcovr -r .. -x -o cobertura.xml
        working-directory: vmicore

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage_vmicore
          path: vmicore/build-gcc-debug/cobertura.xml

  build_core:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gdatasoftwareag/vmi-build

    steps:
      - uses: actions/checkout@v3

      - name: Build vmicore
        run: |
          cmake --preset clang-debug
          cmake --build --preset clang-build-debug --target vmicore
        working-directory: vmicore

      - name: Generate clang-tidy output for codacy
        run: clang-tidy -p build-clang-debug/ $(find src/ -iname *.h -o -iname *.cpp) > clang-tidy-output
        working-directory: vmicore

      - name: Upload clang-tidy artifact
        uses: actions/upload-artifact@v3
        with:
          name: clang_tidy_vmicore
          path: vmicore/clang-tidy-output

  test_inmemoryscanner:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gdatasoftwareag/vmi-build

    steps:
      - uses: actions/checkout@v3

      - name: Test inmemoryscanner
        run: |
          cmake --preset gcc-debug
          cmake --build --preset gcc-build-debug --target inmemoryscanner-test
          ctest --preset gcc-test
          cd build-gcc-debug
          gcovr -r .. -x -o cobertura.xml
        working-directory: plugins/inmemoryscanner

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage_inmemoryscanner
          path: plugins/inmemoryscanner/build-gcc-debug/cobertura.xml

  build_inmemoryscanner:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gdatasoftwareag/vmi-build

    steps:
      - uses: actions/checkout@v3

      - name: Build inmemoryscanner
        run: |
          cmake --preset clang-debug
          cmake --build --preset clang-build-debug --target inmemoryscanner
        working-directory: plugins/inmemoryscanner

      - name: Generate clang-tidy output for codacy
        run: clang-tidy -p build-clang-debug/ $(find src/ -iname *.h -o -iname *.cpp) > clang-tidy-output
        working-directory: plugins/inmemoryscanner

      - name: Upload clang-tidy artifact
        uses: actions/upload-artifact@v3
        with:
          name: clang_tidy_inmemoryscanner
          path: plugins/inmemoryscanner/clang-tidy-output

  clang_tidy_upload:
    needs: [build_core, build_inmemoryscanner]
    runs-on: ubuntu-latest
    # Required because codacy's conversion tool relativizes paths in respect to the current working directory.
    # Since the project path inside a container is different than the path inside a "raw" worker VM we need to
    # make sure that we match the environment where the clang-tidy output was created (though any container
    # image would do, most likely).
    container:
      image: ghcr.io/gdatasoftwareag/vmi-build

    steps:
      - name: Download vmicore clang-tidy artifact
        uses: actions/download-artifact@v3
        with:
          name: clang_tidy_vmicore
          path: vmicore

      - name: Download inmemoryscanner clang-tidy artifact
        uses: actions/download-artifact@v3
        with:
          name: clang_tidy_inmemoryscanner
          path: plugins/inmemoryscanner

      - name: Consolidate clang-tidy output
        run: |
          cat vmicore/clang-tidy-output > clang-tidy-output
          cat plugins/inmemoryscanner/clang-tidy-output >> clang-tidy-output

      - name: Run Codacy Analysis CLI
        uses: rageagainsthepc/codacy-analysis-cli-action@fix-action-path
        with:
          run-docker-tools: false
          clang-tidy-output: clang-tidy-output
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true

  test_coverage_upload:
    needs: [test_core, test_inmemoryscanner]
    runs-on: ubuntu-latest

    steps:
      - name: Download vmicore coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage_vmicore
          path: vmicore

      - name: Download inmemoryscanner coverage artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage_inmemoryscanner
          path: plugins/inmemoryscanner

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: vmicore/cobertura.xml,plugins/inmemoryscanner/cobertura.xml
          language: CPP
          force-coverage-parser: cobertura
